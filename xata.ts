// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "masterProjects",
    columns: [
      { name: "project", type: "string", unique: true },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
    ],
    revLinks: [{ column: "projectId", table: "projectDetails" }],
  },
  {
    name: "projectDetails",
    columns: [
      { name: "description", type: "text" },
      { name: "projectId", type: "link", link: { table: "masterProjects" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type MasterProjects = InferredTypes["masterProjects"];
export type MasterProjectsRecord = MasterProjects & XataRecord;

export type ProjectDetails = InferredTypes["projectDetails"];
export type ProjectDetailsRecord = ProjectDetails & XataRecord;

export type DatabaseSchema = {
  masterProjects: MasterProjectsRecord;
  projectDetails: ProjectDetailsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Nick-Villarreal-s-workspace-4j8rdb.us-west-2.xata.sh/db/tarea-auth",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
